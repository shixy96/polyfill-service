name: Deploy to staging and test
on:
  push:
    branches: [ main ]
env:
  terraform_version: '1.1.7'
  terraform_working_dir: 'fastly/terraform/'
  fastly_vcl_service_id: 2l7QhcR5rkdg691tcdRTD7
  fastly_compute_service_id: 4cUBTkiSVlJnR8JPnLvt85
  domain: qa.polyfill.io
jobs:
  deploy-to-staging:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - run: git fetch --prune --unshallow
    - uses: actions/setup-node@v3.1.0
      with:
        node-version: 12.x
    - name: Cache node modules
      uses: actions/cache@v3.0.1
      env:
        cache-name: cache-node-modules
      with:
        # npm cache files are stored in `~/.npm` on Linux/macOS
        path: ~/.npm
        key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-build-${{ env.cache-name }}-
          ${{ runner.os }}-build-
          ${{ runner.os }}-
    - run: npm ci
    - name: Set up Fastly CLI
      uses: fastly/compute-actions/setup@v2
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
    - run: npm ci && fastly compute build 
      working-directory: fastly/c-at-e
    - name: Turnstyle
      uses: softprops/turnstyle@v1
      with:
        same-branch-only: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    - run: git push https://heroku:${{ secrets.HEROKU_AUTH_TOKEN }}@git.heroku.com/origami-polyfill-service-qa-eu.git HEAD:refs/heads/main --force
    - run: git push https://heroku:${{ secrets.HEROKU_AUTH_TOKEN }}@git.heroku.com/origami-polyfill-service-qa-us.git HEAD:refs/heads/main --force
    - name: Remove the development and production terraform configuration overrides
      run: rm -f terraform.tfstate fastly/terraform/dev_override.tf fastly/terraform/production_override.tf fastly/terraform/domains_override.tf
    - name: 'Terraform Init'
      uses: hashicorp/terraform-github-actions@v0.8.0
      with:
        tf_actions_version: ${{ env.terraform_version }}
        tf_actions_subcommand: 'init'
        tf_actions_working_dir: ${{ env.terraform_working_dir }}
        tf_actions_comment: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    - name: 'Terraform Import Fastly VCL Service'
      uses: hashicorp/terraform-github-actions@v0.8.0
      with:
        tf_actions_version: ${{ env.terraform_version }}
        tf_actions_subcommand: 'import'
        tf_actions_working_dir: ${{ env.terraform_working_dir }}
        tf_actions_comment: true
        args: 'fastly_service_vcl.app ${{ env.fastly_vcl_service_id }}'
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        FASTLY_API_KEY: ${{ secrets.FASTLY_API_KEY_STAGING }}
    - name: 'Terraform Import Fastly Compute Service'
      if: steps.witness.outputs.cache-hit != 'true'
      uses: hashicorp/terraform-github-actions@v0.8.0
      with:
        tf_actions_version: ${{ env.terraform_version }}
        tf_actions_subcommand: 'import'
        tf_actions_working_dir: ${{ env.terraform_working_dir }}
        tf_actions_comment: false
        args: 'fastly_service_compute.app ${{ env.fastly_compute_service_id }}'
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        FASTLY_API_KEY: ${{ secrets.FASTLY_API_KEY_STAGING }}
    - name: 'Terraform Import Fastly Service Dictionary Top-pops Config Items'
      if: steps.witness.outputs.cache-hit != 'true'
      uses: hashicorp/terraform-github-actions@v0.8.0
      with:
        tf_actions_version: ${{ env.terraform_version }}
        tf_actions_subcommand: 'import'
        tf_actions_working_dir: ${{ env.terraform_working_dir }}
        tf_actions_comment: true
        args: 'fastly_service_dictionary_items.toppops_config_items "${{ env.fastly_vcl_service_id }}/4dfSlimwvlJELO6htcnGsi"'
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        FASTLY_API_KEY: ${{ secrets.FASTLY_API_KEY_STAGING }}
    - name: 'Terraform Import Fastly Service Dictionary Compute At Edge Config Items'
      if: steps.witness.outputs.cache-hit != 'true'
      uses: hashicorp/terraform-github-actions@v0.8.0
      with:
        tf_actions_version: ${{ env.terraform_version }}
        tf_actions_subcommand: 'import'
        tf_actions_working_dir: ${{ env.terraform_working_dir }}
        tf_actions_comment: true
        args: 'fastly_service_dictionary_items.compute_at_edge_config_items "${{ env.fastly_vcl_service_id }}/52hxZN9sNy7jyAdvvGKekc"'
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        FASTLY_API_KEY: ${{ secrets.FASTLY_API_KEY_STAGING }}
    - name: 'Terraform Validate'
      uses: hashicorp/terraform-github-actions@v0.8.0
      with:
        tf_actions_version: ${{ env.terraform_version }}
        tf_actions_subcommand: 'validate'
        tf_actions_working_dir: ${{ env.terraform_working_dir }}
        tf_actions_comment: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    - name: 'Terraform Plan'
      uses: hashicorp/terraform-github-actions@v0.8.0
      with:
        tf_actions_version: ${{ env.terraform_version }}
        tf_actions_subcommand: 'plan'
        tf_actions_working_dir: ${{ env.terraform_working_dir }}
        tf_actions_comment: true
        args: '-out=plan.tfplan'
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        FASTLY_API_KEY: ${{ secrets.FASTLY_API_KEY_STAGING }}
    - name: 'Terraform Apply'
      uses: hashicorp/terraform-github-actions@v0.8.0
      with:
        tf_actions_version: ${{ env.terraform_version }}
        tf_actions_subcommand: 'apply'
        tf_actions_working_dir: ${{ env.terraform_working_dir }}
        tf_actions_comment: true
        args: '--auto-approve'
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        FASTLY_API_KEY: ${{ secrets.FASTLY_API_KEY_STAGING }}
    - run: sleep 60

  create-change-log:
    needs: [deploy-to-staging]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: Financial-Times/change-api-action@v1
        name: Create new change log
        with:
          change-api-key: ${{ secrets.CHANGE_API_KEY }}
          system-code: "origami-polyfill-service"
          environment: test
          slack-channels: "ft-changes,origami-deploys"

  purge-cdn:
    needs: [deploy-to-staging]
    runs-on: ubuntu-latest
    steps:
      - run: "curl -X POST -H \"Fastly-Key: ${{ secrets.FASTLY_API_KEY_STAGING }}\" https://api.fastly.com/service/${{ env.fastly_service_id }}/purge_all"
      - run: sleep 60

  end-to-end-test:
    needs: [purge-cdn]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3.1.0
        with:
          node-version: 12.x
      - name: Cache node modules
        uses: actions/cache@v3.0.1
        env:
          cache-name: cache-node-modules
        with:
          # npm cache files are stored in `~/.npm` on Linux/macOS
          path: ~/.npm
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-
            ${{ runner.os }}-build-
            ${{ runner.os }}-
      - run: npm ci
      - run: npm run test:integration
        env:
          HOST: "https://${{ env.domain }}"
      - run: npm ci
        working-directory: fastly/c-at-e
      - run: npm run test:integration
        working-directory: fastly/c-at-e
        env:
          HOST: "https://${{ env.domain }}"
